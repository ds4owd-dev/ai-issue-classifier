# Direct AI classification without intermediate labeling
# .github/workflows/ai-assignment-classifier.yml

name: AI Assignment Classifier
on:
  issues:
    types: [opened]

jobs:
  ai_classify:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      models: read
      contents: read
    steps:
    - name: Checkout for prompt file
      uses: actions/checkout@v4
      
    - name: Add trigger label (temporarily)
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number,
            labels: ['ai-classify']
          });
    
    - name: AI Classification
      uses: github/ai-assessment-comment-labeler@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue_number: ${{ github.event.issue.number }}
        issue_body: ${{ github.event.issue.body }}
        repo_name: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        ai_review_label: 'ai-classify'
        prompts_directory: '.github/prompts'
        labels_to_prompts_mapping: 'ai-classify,assignment-classifier.prompt.yml'
    
    - name: Process AI Results
      uses: actions/github-script@v7
      with:
        script: |
          // Wait a moment for AI action to complete and apply labels
          await new Promise(resolve => setTimeout(resolve, 2000));
          
          // Get updated issue with AI-generated labels
          const { data: issue } = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.issue.number
          });
          
          const labels = issue.labels.map(label => label.name);
          const student = context.payload.issue.user.login;
          
          console.log('AI generated labels:', labels);
          
          // Check AI classification results
          const isSubmission = labels.some(label => 
            label.includes('ai:assignment-classifier:submission') || 
            label.includes('ai:assignment-classifier:completed')
          );
          
          const isQuestion = labels.some(label => 
            label.includes('ai:assignment-classifier:question') || 
            label.includes('ai:assignment-classifier:help')
          );
          
          if (isSubmission) {
            // Handle assignment submission
            const message = `üéâ **Assignment Submission Received!** *(AI Classified)*\n\n` +
              `Hi @${student}! Your assignment submission has been successfully recorded.\n\n` +
              `**Repository:** ${context.repo.repo}\n` +
              `**Submitted:** ${new Date().toLocaleString()}\n` +
              `**AI Confidence:** High ‚úÖ\n\n` +
              `Your instructors @massarin @seawaR @larnsce have been notified.\n\n` +
              `Great job completing this assignment! üöÄ\n\n` +
              `---\n` +
              `*This issue was automatically processed using AI classification. For questions about this assignment, please open a new issue with "Question" in the title.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: message
            });
            
            // Clean up labels and add final ones
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['assignment-submission', 'completed', 'ai-processed']
            });
            
            // Close the submission
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed'
            });
            
          } else if (isQuestion) {
            // Handle question/help request
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: ['massarin', 'seawaR', 'larnsce']
            });

            const questionMessage = `üëã **Question Detected** *(AI Classified)*\n\n` +
              `Hi @${student}! I've identified this as a question or help request.\n\n` +
              `**Repository:** ${context.repo.repo}\n` +
              `**AI Confidence:** High ‚úÖ\n\n` +
              `Your instructors @massarin @seawaR @larnsce have been notified and will respond soon.\n\n` +
              `**Need urgent help?** Please reach out via course communication channels.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: questionMessage
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['question', 'needs-instructor-review', 'ai-processed']
            });
            
          } else {
            // AI couldn't classify with confidence
            const unclearMessage = `ü§î **Classification Uncertain** *(AI Analysis)*\n\n` +
              `Hi @${student}! I analyzed your issue but couldn't determine with confidence if this is:\n\n` +
              `- üìö **Assignment submission** - Please mention "completed assignment" or tag instructors\n` +
              `- ‚ùì **Question/help request** - Please be more specific about what you need help with\n\n` +
              `**Next steps:** Please edit your issue to clarify, or instructors @massarin @seawaR @larnsce will review manually.\n\n` +
              `*Powered by AI classification*`;

            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: ['massarin', 'seawaR', 'larnsce']
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: unclearMessage
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['needs-manual-review', 'ai-uncertain']
            });
          }
          
          // Clean up the temporary trigger label
          try {
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              name: 'ai-classify'
            });
          } catch (error) {
            console.log('Trigger label already removed or not found');
          }