# Simple AI Assignment Classifier using OpenAI Structured Output
name: Simple AI Assignment Classifier

on:
  issues:
    types: [opened, reopened]

jobs:
  classify:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    steps:
    - name: AI Classification with Structured Output
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = context.payload.issue.body || '';
          const issueTitle = context.payload.issue.title || '';
          const student = context.payload.issue.user.login;
          
          // Prepare the prompt
          const prompt = `Analyze this GitHub issue from a student and classify it:

          Title: "${issueTitle}"
          Body: "${issueBody}"
          
          Classify as either:
          - "submission": Assignment completed, ready for review
          - "question": Student needs help or has a question
          
          Look for completion indicators like "completed", "finished", "done", "@instructor" or help indicators like "error", "stuck", "how", "why", "help".`;

          try {
            // Call OpenAI API with structured output
            const response = await fetch('https://models.github.ai/inference', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${{ secrets.GITHUB_TOKEN }}`
              },
              body: JSON.stringify({
                model: 'openai/gpt-4o-mini',
                messages: [
                  {
                    role: 'system',
                    content: 'You are an educational assistant that classifies student issues. Respond with JSON only.'
                  },
                  {
                    role: 'user', 
                    content: prompt
                  }
                ],
                response_format: {
                  type: 'json_schema',
                  json_schema: {
                    name: 'classification',
                    strict: true,
                    schema: {
                      type: 'object',
                      properties: {
                        classification: {
                          type: 'string',
                          enum: ['submission', 'question']
                        },
                        confidence: {
                          type: 'string',
                          enum: ['high', 'medium', 'low']
                        },
                        reasoning: {
                          type: 'string'
                        }
                      },
                      required: ['classification', 'confidence', 'reasoning'],
                      additionalProperties: false
                    }
                  }
                },
                max_tokens: 200
              })
            });

            if (!response.ok) {
              throw new Error(`API call failed: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            const result = JSON.parse(data.choices[0].message.content);
            
            console.log('AI Classification Result:', result);
            
            const instructors = ['massarin', 'seawaR', 'larnsce'];
            const instructorMentions = instructors.map(i => `@${i}`).join(' ');
            
            if (result.classification === 'submission') {
              // Handle assignment submission
              const message = `ðŸŽ‰ **Assignment Submission Received!**\n\n` +
                `Hi @${student}! Your assignment submission has been recorded.\n\n` +
                `**Repository:** ${context.repo.repo}\n` +
                `**Submitted:** ${new Date().toLocaleString()}\n` +
                `**AI Analysis:** ${result.reasoning}\n` +
                `**Confidence:** ${result.confidence.charAt(0).toUpperCase() + result.confidence.slice(1)} âœ…\n\n` +
                `Instructors ${instructorMentions} have been notified. Great work! ðŸš€`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: message
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: ['assignment-submission', 'completed', 'ai-processed']
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                state: 'closed'
              });
              
            } else if (result.classification === 'question') {
              // Handle question
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                assignees: instructors
              });

              const questionMessage = `ðŸ‘‹ **Question Detected**\n\n` +
                `Hi @${student}! I've identified this as a question or help request.\n\n` +
                `**AI Analysis:** ${result.reasoning}\n` +
                `**Confidence:** ${result.confidence.charAt(0).toUpperCase() + result.confidence.slice(1)} âœ…\n\n` +
                `Instructors ${instructorMentions} have been assigned and will respond soon.`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: questionMessage
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: ['question', 'needs-instructor-review', 'ai-processed']
              });
            }
            
          } catch (error) {
            console.error('AI Classification failed:', error);
            
            // Fallback to manual review
            const errorMessage = `ðŸ¤– **AI Classification Failed**\n\n` +
              `Hi @${student}! Our AI classifier encountered an issue.\n\n` +
              `Instructors ${instructorMentions} have been notified for manual review.\n\n` +
              `Error: ${error.message}`;

            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: instructors
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: errorMessage
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['needs-manual-review', 'ai-failed']
            });
          }