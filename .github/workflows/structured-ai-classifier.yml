# AI Assignment Classifier using Structured Output
name: Structured AI Assignment Classifier

on:
  issues:
    types: [opened, reopened]

jobs:
  classify:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
      models: read
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: AI Classification with JSON Schema
      id: classify
      uses: actions/ai-inference@v1
      with:
        prompt-file: '.github/prompts/classification.prompt.yml'
        input: |
          title: ${{ github.event.issue.title }}
          body: ${{ github.event.issue.body }}
        
    - name: Process Classification Result
      uses: actions/github-script@v7
      with:
        script: |
          const student = context.payload.issue.user.login;
          const instructors = ['massarin', 'seawaR', 'larnsce'];
          const instructorMentions = instructors.map(i => `@${i}`).join(' ');
          
          try {
            const aiResponse = `${{ steps.classify.outputs.response }}`;
            console.log('AI Response:', aiResponse);
            
            // Parse the structured JSON response
            const result = JSON.parse(aiResponse);
            console.log('Parsed Classification:', result);
            
            if (result.classification === 'submission') {
              // Handle assignment submission
              const message = `ðŸŽ‰ **Assignment Submission Received!**\n\n` +
                `Hi @${student}! Your assignment submission has been recorded.\n\n` +
                `**Repository:** ${context.repo.repo}\n` +
                `**Submitted:** ${new Date().toLocaleString()}\n` +
                `**AI Analysis:** ${result.reasoning}\n` +
                `**Confidence:** ${result.confidence.charAt(0).toUpperCase() + result.confidence.slice(1)} âœ…\n\n` +
                `Instructors ${instructorMentions} have been notified. Great work! ðŸš€\n\n` +
                `---\n` +
                `*This issue was automatically processed using AI classification.*`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: message
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: ['assignment-submission', 'completed', 'ai-processed']
              });
              
              // Close the submission
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                state: 'closed'
              });
              
            } else if (result.classification === 'question') {
              // Handle question/help request
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                assignees: instructors
              });

              const questionMessage = `ðŸ‘‹ **Question Detected**\n\n` +
                `Hi @${student}! I've identified this as a question or help request.\n\n` +
                `**AI Analysis:** ${result.reasoning}\n` +
                `**Confidence:** ${result.confidence.charAt(0).toUpperCase() + result.confidence.slice(1)} âœ…\n\n` +
                `Instructors ${instructorMentions} have been assigned and will respond soon.\n\n` +
                `**Need urgent help?** Please reach out via course communication channels.`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: questionMessage
              });
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: ['question', 'needs-instructor-review', 'ai-processed']
              });
            }
            
          } catch (error) {
            console.error('Classification processing failed:', error);
            
            // Fallback to manual review
            const errorMessage = `ðŸ¤– **AI Classification Failed**\n\n` +
              `Hi @${student}! Our AI classifier encountered an issue processing your request.\n\n` +
              `**Error:** ${error.message}\n\n` +
              `Instructors ${instructorMentions} have been notified for manual review.\n\n` +
              `**Sorry for the inconvenience!** Your issue will be handled manually.`;

            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: instructors
            });

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: errorMessage
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['needs-manual-review', 'ai-failed']
            });
          }